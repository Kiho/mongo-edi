
Major Changes in Edi
--------------------

* Included more/better exception handling at the
  App class method level and the command method level
  There are now error message boxes that display exceptions with a nice view and point users to the codeplex issue tracker

* Every aspect of the application (including dialogs) can now be themed.
  This means the application is completely skinable except for the Window Chrome.
  § 3.0.1

* MsgBox Background Color is now themed in ExpressionDark
  Pressing Esc on MsgBox will message Cancel if available (bugfix)
  Improved ExpressionDark theme towards better MouseOver, IsEnabled, and Keyboard focus visibility for buttons

* Added ExpressionDark Theme and made some icons theme-able for ExpressionDark

  Added bugfix suggested in http://www.codeproject.com/Articles/42490/Using-AvalonEdit-WPF-Text-Editor?msg=4388281#xx4388281xx
  Updated selection colors for text selection in VS2010 and Aero

* Included link to codeplex in critical error messages
  Correct Selection colors to be more appropriate for each theme

* Adjusted MRU Tool Windoe RecentFileList Hyperlinks
  View to display path with ellipsis at the center of the string

* Integrated custom MsgBox service to service messages with hyperlinks
  to project home page and online help

* Integrated CTRL+F and CTRL+H Find/Replace text for current document

  Support       F3 (Find Next)
  Support Shift+F3 (Find Previous)
  FindReplace Integration for all currently open documents

* Integrated Read-Only file open function
  § 3.2.8 File>Open (Read-Only files)

* Integrated open text file command via command line
  § 3.1.2
  (Currently there are no other command line parameters implemented)

* Integrated theming which can be changed at run-time (§ 3.0.1)

* Implemented line/column cursor indicator in lower right corner of MainWindow
  § 3.2.1.4
  Added dependency properties in FileDocument (TextEditor Wrapper) class
  (these properties are changed via textEditor.TextArea.Caret.PositionChanged event)
  
  --> Added OnWayToSource binding in ViewModel and
  --> OneWay binding to ViewModel in MainWindow

* Implement Overtype/Insert mode via toggled Insert key in View
  § 3.2.1.4
  --> ICSharpCode.AvalonEdit.Editing.EmptySelection.ReplaceSelectionWithText
  --> ICSharpCode.AvalonEdit.Editing.TextArea.OnKeyUp
  --> Options.ICSharpCode.AvalonEdit.TextEditorOptions.IsInsertMode
  
  ViewModel
  --> Bind to ActiveDocument.Options.IsInsertMode
  --> Converter: AvalonDock.MVVMTestApp.Converter.BooleanToTypeModeStringConverter


* Almost completted save/restore function of editor state when user CTRL+Tabs between documents
  § 3.1.5
  
- Added attached property with ITextBoxControl interface for communication between
  AvalonEdit and FileDocumentViewModel

  http://stackoverflow.com/questions/2596757/mvvm-how-can-i-select-text-in-a-textbox

  This is an event based mechanism which works great wherever simple binding is inappropriate.

* Add Save All (button) to save all edited (and new documents and program settings with MRU)
  § 3.1.1

* Added and Save of AvalonDock layout on startup/shutdown of application
  
* Added option in Config to decide whether last session of open files
  should be recovered or not
  Done
 
* Implemented XML Serialization for program settings and session data

* Bug Fix
  Position Window on second monitor does not work
  Problem:
  Window is displayed in default size on first monitor if application is restarted
  Done

* Updated TXT Highlighting
  Now includes *Bold* and ~Italic~ formattings
  Done

* Bug Fix with File>New
  Document View was not initialized correctly (View size was 100% instead of 150% as in program settings)
  Documents that were created with File>New and saved via File>SaveAs or File>Save were not added into MRU
  Done

TODO Update requirements up to this point

- Added Find Replace/Function for current document and fixed bug in FileDocument.xaml
  Problem. FocusManager.IsFocusScope="True" caused bound commands to work no longer in ToolBar and MainMenu
  Done

- Added folders: Behaviour, Converter, Images/Application, Themes, Util, ViewModel
  with corresponding content
  Done

- Replaced New, Open, Save, Save As, Close commands in MainWindow with WPFs ApplicationCommands.<...>
  standard commands and bindings in Workspace.InitCommandBinding method
  Done
   
- Changed FileViewModel to override inherited Title property and changed FileName property
  Done

- Replaced all Commands (except for close) with Standard WPF ApplicationCommand RoutedUICommand bindings
  Done

- Fixed bug in Close Command
  Issue 1: Close Command is not disabled if there is no document to close
  Isuue 2: The ActiveDocument is not reset to null (or another document)
           if the ActiveDocument is closed

  - Implemented ApplicationCommands.Close to envoke close command from mainWindow (menu and toolbar items)
  - Adjusted Workspace.Close method to handle ActiveDocument correctly

- Removed x:Name="mainWindow" and moved Layout Save/Load command into Workspace ViewModel
  (this way replacing the current MainWindow with a different Window class is more simplified
   because there are fewer dependencies between View and ViewModel)

- Added toolbar to expose functionality for AvalonEdit (Change Highlighting, Undo, Redo etc...)

- Issue: Canceling saving edits when shuting down the editor does not result in canceling the shutdown process

  Changed signature in Workspace.Close to call this method on Application Shutdown
  
- Added Ctrl-F4 KeyBindings to all CloseCommand command bindings throughout the application

---------------------- ---------------------------------------------------------------------------------------------
- Added App.RegisterCustomHighlightingPatterns() for adding non-standard highlighing patterns
  
  - AvalonEdit Issue:
    App.RegisterCustomHighlightingPatterns works for some reason only if called from the mainWindow Constructor(?).

- Added HighlightingDefinitionsSortedByName property in HighlightManager.cs
  
    /// <summary>
    /// Gets a - sorted by name - copy of all highlightings.
    /// </summary>
    public ReadOnlyCollection<IHighlightingDefinition> HighlightingDefinitionsSortedByName
    {
      get
      {
        lock (lockObj)
        {
          System.Collections.Generic.SortedDictionary<string, IHighlightingDefinition> sort = new SortedDictionary<string,IHighlightingDefinition>();

          if (allHighlightings != null)
          {
            foreach(IHighlightingDefinition h in allHighlightings)
            {
              sort.Add(h.Name, h);
            }
          }

          IHighlightingDefinition[] a = new IHighlightingDefinition[sort.Count];

          int i = 0;
          foreach (IHighlightingDefinition h in sort.Values)
          {
            a[i++] = h;
          }

          return Array.AsReadOnly(a);
        }
      }
    }

    - AvalonEdit Issue:
      Is this the best way for sorted output (is there already a sort function)?
      Is there a sorted insert function?
      Can Highlightings be initialized without the AvalonEdit build in patterns?
---------------------- ---------------------------------------------------------------------------------------------
  Added about 10 Highlighting patterns found on the Internet and a few own patterns:
  - TXT
  - VTL
  - INI

---------------------- ---------------------------------------------------------------------------------------------
  - Added scale of font control setting at the foot of the ScrollViewer of the
    TextEditor view.
---------------------- ---------------------------------------------------------------------------------------------

  Updated AvalonEdit to version the SharpDevelop_4.3.0.8857_Source version from
  http://build.sharpdevelop.net/BuildArtefacts/
  
