<Window x:Class="Edi.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"

        xmlns:avalonDockProperties="clr-namespace:AvalonDock.Properties;assembly=AvalonDock"
        xmlns:avalonDock="http://avalondock.codeplex.com"
        xmlns:shell="clr-namespace:Microsoft.Windows.Shell;assembly=AvalonDock"

        xmlns:pane="clr-namespace:Edi.View.Pane"
        xmlns:local="clr-namespace:Edi"
        xmlns:sys="clr-namespace:System;assembly=mscorlib"
        xmlns:sysWindows="clr-namespace:System.Windows;assembly=PresentationCore"

        xmlns:avalonEdit="http://icsharpcode.net/sharpdevelop/avalonedit"

        xmlns:behav="clr-namespace:Edi.Behaviour"
        xmlns:view="clr-namespace:Edi.View"
        xmlns:conv="clr-namespace:Edi.Converter"
        xmlns:cmd="clr-namespace:Edi"

        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        mc:Ignorable="d" 
        d:DesignHeight="300" d:DesignWidth="700"             

        Title="{Binding ApplicationTitle}"

        behav:DialogCloser.DialogResult="{Binding DialogCloseResult}"        
        >
  <Window.Resources>
    <conv:ActiveDocumentConverter x:Key="ActiveDocumentConverter"/>
    <avalonDock:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter"/>
    <conv:BooleanToTypeModeStringConverter x:Key="DisplayTypeModeConverter" />
  </Window.Resources>
  <Grid>
    <Grid.RowDefinitions>
      <RowDefinition Height="Auto"/>
      <RowDefinition Height="Auto"/>
      <RowDefinition Height="*"/>
      <RowDefinition Height="Auto"/>
    </Grid.RowDefinitions>
    <Menu Grid.Row="0">
      <MenuItem Header="_File">
        <MenuItem Header="New" Command="New"/>
        <MenuItem Header="Open" Command="Open"/>
        <Separator/>
        <MenuItem Header="Save" Command="Save"/>
        <MenuItem Header="Save As..." Command="SaveAs"/>
        <MenuItem ItemsSource="{Binding RecentFiles.MruList.ListOfMRUEntries}" Grid.Row="0" Header="Recent Files"
                  Visibility="{Binding Path=RecentFiles.MruList.ListOfMRUEntries, Mode=OneWay, Converter={conv:ZeroToVisibilityConverter}}">
          <MenuItem.ItemContainerStyle>
            <Style TargetType="MenuItem">
              <Setter Property="Header" Value="{Binding DisplayPathFileName, Mode=OneWay}" />
              <Setter Property="Command" Value="cmd:AppCommand.LoadFile" />
              <Setter Property="CommandParameter" Value="{Binding PathFileName, Mode=OneWay}" />
            </Style>
          </MenuItem.ItemContainerStyle>
        </MenuItem>
        <Separator/>
        <MenuItem Header="Close" Command="cmd:AppCommand.CloseFile"
                                 CommandParameter="{Binding ActiveDocument}"/>
        <Separator/>
        <MenuItem Header="Exit" Command="cmd:AppCommand.Exit" />
      </MenuItem>
      <MenuItem Header="_Edit">
        <MenuItem Header="Find" Command="Find"/>
        <Separator />
        <MenuItem Header="Cut" Command="Cut"
          ToolTip="{Binding RelativeSource={RelativeSource Self}, Path=Command.Text}">
          <MenuItem.Icon>
            <Image Source="{StaticResource Image_Cut}" Height="16" />
          </MenuItem.Icon>
        </MenuItem>
        <MenuItem Header="Copy" Command="Copy"
          ToolTip="{Binding RelativeSource={RelativeSource Self}, Path=Command.Text}">
          <MenuItem.Icon>
            <Image Source="{StaticResource Image_Copy}" Height="16" />
          </MenuItem.Icon>
        </MenuItem>
        <MenuItem Header="Paste" Command="Paste"
          ToolTip="{Binding RelativeSource={RelativeSource Self}, Path=Command.Text}">
          <MenuItem.Icon>
            <Image Source="{StaticResource Image_Paste}" Height="16"/>
          </MenuItem.Icon>
        </MenuItem>
        <MenuItem Header="Delete" Command="Delete"
          ToolTip="{Binding RelativeSource={RelativeSource Self}, Path=Command.Text}">
          <MenuItem.Icon>
            <Image Source="{StaticResource Image_Delete}" Height="16"/>
          </MenuItem.Icon>
        </MenuItem>
        <Separator />
        <MenuItem Command="cmd:AppCommand.SelectAll" Header="Select All"
                  ToolTip="{Binding RelativeSource={RelativeSource Self}, Path=Command.Text}"/>
        <Separator/>
        <MenuItem Header="Go to line..." Command="cmd:AppCommand.GotoLine"
                  ToolTip="{Binding RelativeSource={RelativeSource Self}, Path=Command.Text}">
          <MenuItem.Icon>
            <Image Source="{StaticResource Image_EditFind}" Width="16" />
          </MenuItem.Icon>
        </MenuItem>
        <MenuItem Header="Find" Command="cmd:AppCommand.FindText"
                  ToolTip="{Binding RelativeSource={RelativeSource Self}, Path=Command.Text}"/>

        <MenuItem Header="Replace..." Command="cmd:AppCommand.ReplaceText"
                  ToolTip="{Binding RelativeSource={RelativeSource Self}, Path=Command.Text}"/>
      </MenuItem>
      <MenuItem Header="_View">
        <MenuItem Header="_Themes" ItemsSource="{Binding Skins.Themes}">
          <MenuItem.Resources>
            <RadioButton x:Key="rb" x:Shared="false" HorizontalAlignment="Right"  VerticalAlignment="Center"
                         GroupName="MenuGroup" IsChecked="{Binding IsChecked}"
                         IsHitTestVisible="False"
                         Margin="3,0,0,0">
              <RadioButton.Template>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                  <!-- Data="M 0,5.1 L 1.7,5.2 L 3.4,7.1 L 8,0.4 L 9.2,0 L 3.3,10.8 Z" -->
                  <Grid>
                    <Path x:Name="uncheck" Visibility="Collapsed" Margin="7,0,0,0" VerticalAlignment="Center"
                        Fill="Transparent">
                      <Path.Data>
                        <PathGeometry>
                          <PathGeometry.Figures>
                            <PathFigureCollection>
                              <PathFigure IsClosed="True" StartPoint="0,0">
                                <PathFigure.Segments>
                                  <PathSegmentCollection>
                                    <LineSegment Point="16,0" />
                                    <LineSegment Point="16,16" />
                                    <LineSegment Point="0,16" />
                                  </PathSegmentCollection>
                                </PathFigure.Segments>
                              </PathFigure>
                            </PathFigureCollection>
                          </PathGeometry.Figures>
                        </PathGeometry>
                      </Path.Data>
                    </Path>
                    <Path x:Name="check" Visibility="Collapsed" Margin="7,0,0,0" VerticalAlignment="Center"
                        Fill="{TemplateBinding MenuItem.Foreground}">
                      <Path.Data>
                        <PathGeometry>
                          <PathGeometry.Figures>
                            <PathFigureCollection>
                              <PathFigure IsClosed="True" StartPoint="2.5,8">
                                <PathFigure.Segments>
                                  <PathSegmentCollection>
                                    <LineSegment Point="5,13.5" />
                                    <LineSegment Point="7,13.5" />
                                    <LineSegment Point="12.5,2.5" />
                                    <LineSegment Point="5.5,11.5" />
                                  </PathSegmentCollection>
                                </PathFigure.Segments>
                              </PathFigure>
                            </PathFigureCollection>
                          </PathGeometry.Figures>
                        </PathGeometry>
                      </Path.Data>
                    </Path>
                  </Grid>
                  <ControlTemplate.Triggers>
                    <Trigger Property="IsChecked" Value="True">
                      <Setter TargetName="check" Property="Visibility" Value="Visible" />
                    </Trigger>
                    <Trigger Property="IsChecked" Value="False">
                      <Setter TargetName="uncheck" Property="Visibility" Value="Visible" />
                    </Trigger>
                  </ControlTemplate.Triggers>
                </ControlTemplate>
              </RadioButton.Template>
            </RadioButton>
          </MenuItem.Resources>
          <MenuItem.ItemContainerStyle>
            <Style TargetType="MenuItem" BasedOn="{StaticResource {x:Type MenuItem}}">
              <Setter Property="Header" Value="{Binding Text}" />
              <Setter Property="Icon" Value="{DynamicResource rb}" />
              <Setter Property="Command" Value="cmd:AppCommand.ViewTheme" />
              <Setter Property="CommandParameter" Value="{Binding ThemeID}" />
              <Setter Property="Margin" Value="3,3,3,0" />

              <!-- http://social.msdn.microsoft.com/Forums/en-US/wpf/thread/63696841-0358-4f7a-abe1-e6062518e3d6 -->
              <Setter Property="behav:MergeStyleBehaviour.AutoMergeStyle" Value="True"/>
            </Style>
          </MenuItem.ItemContainerStyle>
        </MenuItem>
      </MenuItem>

      <!-- XXXXXXXXXXXXXXXXXXXX -->
      <MenuItem Header="_Tools">
        <MenuItem Header="RecentFiles" IsChecked="{Binding RecentFiles.IsVisible, Mode=TwoWay}" IsCheckable="True"/>
        <MenuItem Header="Properties" IsChecked="{Binding FileStats.IsVisible, Mode=TwoWay}" IsCheckable="True"/>
      </MenuItem>
    </Menu>
    <ToolBarTray Grid.Row="1" SnapsToDevicePixels="True" >
      <ToolBar  VerticalAlignment="Stretch" ToolBarTray.IsLocked="True" DockPanel.Dock="Left" SnapsToDevicePixels="True">
        <Button Command="New" SnapsToDevicePixels="True"
                ToolTip="{Binding RelativeSource={RelativeSource Self}, Path=Command.Text}">
          <Image Source="{StaticResource Image_New}" Height="32" SnapsToDevicePixels="True" />
        </Button>
        <Button Command="Open" SnapsToDevicePixels="True"
                ToolTip="{Binding RelativeSource={RelativeSource Self}, Path=Command.Text}">
          <Image Source="{StaticResource Image_Open}" Height="32" SnapsToDevicePixels="True" />
        </Button>
        <Button Command="Save" SnapsToDevicePixels="True"
              ToolTip="{Binding RelativeSource={RelativeSource Self}, Path=Command.Text}">
          <Image Source="{StaticResource Image_Save}" Height="32" SnapsToDevicePixels="True" />
        </Button>

        <Button Command="cmd:AppCommand.SaveAll" SnapsToDevicePixels="True"
              ToolTip="{Binding RelativeSource={RelativeSource Self}, Path=Command.Text}">
          <Image Source="{StaticResource Image_SaveAll}" Height="32" SnapsToDevicePixels="True" />
        </Button>

        <Separator Margin="3" SnapsToDevicePixels="True" />

        <!-- TextArea Edit Commands work via
       (1) 'Command="Copy"'
           'Command="Cut"'
           'Command="Paste"'
           'Command="Delete"'

            that is via ApplicationCommands.Cut (WPF standard fucntionality since AvalonEdit registers its Edit commands there).

       (2) Or they can be executed via custom commands defined in Workspace_Commands:
            
            Command="cmd:AppCommand.CutItem"
            CommandParameter="{Binding ElementName=dockManager}"

            Command="cmd:AppCommand.CopyItem"
            CommandParameter="{Binding ElementName=dockManager}"

            Command="cmd:AppCommand.PasteItem"
            CommandParameter="{Binding ElementName=dockManager}"

            Command="cmd:AppCommand.DeleteItem"
            CommandParameter="{Binding ElementName=dockManager}"

            In any case, the commandbinding does not succeed when the document is not docked
            (see comment in Workspace_Commands.PerformTextAreaEdit for more details)
      -->
        <Button Command="Copy" SnapsToDevicePixels="True"
              ToolTip="{Binding RelativeSource={RelativeSource Self}, Path=Command.Text}">
          <Image Source="{StaticResource Image_Copy}" Height="32" SnapsToDevicePixels="True" />
        </Button>
        <Button Command="Cut" SnapsToDevicePixels="True"
              ToolTip="{Binding RelativeSource={RelativeSource Self}, Path=Command.Text}">
          <Image Source="{StaticResource Image_Cut}" Height="32" SnapsToDevicePixels="True" />
        </Button>
        <Button Command="Paste" SnapsToDevicePixels="True"
              ToolTip="{Binding RelativeSource={RelativeSource Self}, Path=Command.Text}">
          <Image Source="{StaticResource Image_Paste}" Height="32" SnapsToDevicePixels="True" />
        </Button>
        <Button Command="Delete" SnapsToDevicePixels="True"
              ToolTip="{Binding RelativeSource={RelativeSource Self}, Path=Command.Text}">
          <Image Source="{StaticResource Image_Delete}" Height="32"/>
        </Button>

        <Separator Margin="3"/>

        <Button Command="Undo" SnapsToDevicePixels="True"
              ToolTip="{Binding RelativeSource={RelativeSource Self}, Path=Command.Text}">
          <Image Source="{StaticResource Image_Undo}" Height="32"/>
        </Button>
        <Button Command="Redo" SnapsToDevicePixels="True"
              ToolTip="{Binding RelativeSource={RelativeSource Self}, Path=Command.Text}">
          <Image Source="{StaticResource Image_Redo}" Height="32"/>
        </Button>
        <Separator/>
        <ToggleButton IsChecked="{Binding ActiveDocument.WordWrap, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                  Command="cmd:AppCommand.WordWrap"
                  ToolTip="{Binding RelativeSource={RelativeSource Self}, Path=Command.Text}">
          <ToggleButton.Resources>
            <Style TargetType="{x:Type ToggleButton}">
              <Setter Property="Background" Value="Green" />
            </Style>
          </ToggleButton.Resources>
          <Image Source="{StaticResource Image_WordWrap}" Height="32"/>
        </ToggleButton>
        <ToggleButton IsChecked="{Binding ActiveDocument.ShowLineNumbers, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                  Command="cmd:AppCommand.ShowLineNumbers"
                  ToolTip="{Binding RelativeSource={RelativeSource Self}, Path=Command.Text}">
          <Image Source="{StaticResource Image_ShowLineNumbers}" Height="32"/>
        </ToggleButton>
        <ToggleButton IsChecked="{Binding ActiveDocument.ShowEndOfLine, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                  Command="cmd:AppCommand.ShowEndOfLine"
                  ToolTip="{Binding RelativeSource={RelativeSource Self}, Path=Command.Text}">
          <Image Source="{StaticResource Image_EndOfLine}" Height="32"/>
        </ToggleButton>
        <ToggleButton IsChecked="{Binding ActiveDocument.ShowSpaces, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                  Command="cmd:AppCommand.ShowSpaces"
                  ToolTip="{Binding RelativeSource={RelativeSource Self}, Path=Command.Text}">
          <Image Source="{StaticResource Image_Space}" Height="32"/>
        </ToggleButton>
        <ToggleButton IsChecked="{Binding ActiveDocument.ShowTabs, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                  Command="cmd:AppCommand.ShowTabs"
                  ToolTip="{Binding RelativeSource={RelativeSource Self}, Path=Command.Text}">
          <Image Source="{StaticResource Image_Tabs}" Height="32"/>
        </ToggleButton>

        <Button Command="cmd:AppCommand.RunScript" SnapsToDevicePixels="True"
            ToolTip="{Binding RelativeSource={RelativeSource Self}, Path=Command.Text}">
                    <Image Source="{StaticResource Image_Run}" Height="32"/>
        </Button>
          
        <Separator Visibility="{Binding Path=ActiveDocument, Mode=OneWay, Converter={conv:ActiveDocumentToVisibilityConverter}}"
            Margin="3" />
        <!-- Select Highlighting pattern combobox is visible only if there is an active document (otherwise there ain't much to highlight) -->
        <ComboBox SelectedItem="{Binding ActiveDocument.HighlightingDefinition}"
				          ItemsSource="{Binding Source={x:Static avalonEdit:HighlightingManager.Instance}, Path=HighlightingDefinitionsSortedByName}"
                  Visibility="{Binding Path=ActiveDocument, Mode=OneWay, Converter={conv:ActiveDocumentToVisibilityConverter}}"
                  MinWidth="100" Margin="3,0"
                  ToolTip="Text Highlighting"
        />
      </ToolBar>
    </ToolBarTray>

    <avalonDock:DockingManager x:Name="dockManager" 
                               AnchorablesSource="{Binding Tools}" 
                               DocumentsSource="{Binding Files}"
                               ActiveContent="{Binding ActiveDocument, Mode=TwoWay, Converter={StaticResource ActiveDocumentConverter}}"
                               Grid.Row="2"
                               AllowDrop="True"
                               behav:DropFileCommand.DropCommand="cmd:AppCommand.LoadFile">
      <avalonDock:DockingManager.DocumentHeaderTemplate>
        <DataTemplate>
          <StackPanel Orientation="Horizontal">
            <TextBlock Text="{Binding Title}" TextTrimming="CharacterEllipsis" VerticalAlignment="Center" />
            <!-- Show IsReadOnly Icon if that properties' true -->
            <Image Source="{StaticResource Image_DocTabReadOnly}"
                   Margin="3,0,0,0"
                   Visibility="{Binding Content.IsReadOnly, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}"
                   ToolTip="{Binding Content.IsReadOnlyReason}"
                   VerticalAlignment="Center"
                   />
          </StackPanel>
        </DataTemplate>
      </avalonDock:DockingManager.DocumentHeaderTemplate>
      <avalonDock:DockingManager.DocumentContextMenu>
        <ContextMenu>
          <MenuItem Header="Open Containing Folder..." 
                    Command="{Binding Model.OpenContainingFolderCommand}"
                    />
          <MenuItem Header="Copy URL to Clipboard" 
                    Command="{Binding Model.CopyFullPathtoClipboard}"
                    />
          <Separator/>

          <MenuItem Header="{x:Static avalonDockProperties:Resources.Document_Close}" 
                    Command="{Binding Path=CloseCommand}"
                    Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}"
                    />
          <MenuItem Header="{x:Static avalonDockProperties:Resources.Document_CloseAllButThis}" 
                    Command="{Binding Path=CloseAllButThisCommand}"
                    />
          <MenuItem Header="{x:Static avalonDockProperties:Resources.Document_Float}" 
                    Command="{Binding Path=FloatCommand}"
                    />
          <MenuItem Header="{x:Static avalonDockProperties:Resources.Document_DockAsDocument}" 
                    Command="{Binding Path=DockAsDocumentCommand}"
                    />
          <MenuItem Header="{x:Static avalonDockProperties:Resources.Document_NewHorizontalTabGroup}" 
                    Command="{Binding Path=NewHorizontalTabGroupCommand}"
                    Visibility="{Binding Path=IsEnabled, RelativeSource={RelativeSource Self}, Mode=OneWay, Converter={StaticResource BoolToVisibilityConverter}}"
                    >
            <MenuItem.Icon>
              <Image Source="/AvalonDock.Themes.Aero;component/Images/HTabGroup.png" Stretch="Uniform" Width="14"/>
            </MenuItem.Icon>
          </MenuItem>
        </ContextMenu>
      </avalonDock:DockingManager.DocumentContextMenu>
      <avalonDock:DockingManager.LayoutItemTemplateSelector>
          <pane:PanesTemplateSelector>
          <pane:PanesTemplateSelector.FileViewTemplate>
            <DataTemplate>
              <view:EdiView Grid.Row="1"
                  Options="{Binding TextOptions}"
                  SyntaxHighlighting="{Binding HighlightingDefinition, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                       
                  EditorCaretOffset="{Binding TextEditorCaretOffset, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                  EditorSelectionLength="{Binding TextEditorSelectionLength, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                  EditorSelectionStart="{Binding TextEditorSelectionStart, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                  EditorIsRectangleSelection="{Binding TextEditorIsRectangularSelection, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                  EditorScrollOffsetX="{Binding TextEditorScrollOffsetX, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                  EditorScrollOffsetY="{Binding TextEditorScrollOffsetY, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                  EditorCurrentLineBackground="{DynamicResource EditorCurrentLineBackgroundColor}"

                  FontSize="{Binding Path=FontSize.SelectedFontSize}"

                  WordWrap="{Binding Path=WordWrap, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                  ShowLineNumbers="{Binding Path=ShowLineNumbers, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"

                  IsModified="{Binding Path=IsDirty, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                  IsReadOnly="{Binding IsReadOnly}"

                  TextBoxController="{Binding TxtControl}"
                  Line="{Binding Line, Mode=OneWayToSource}"
                  Column="{Binding Column, Mode=OneWayToSource}"
                />
            </DataTemplate>
          </pane:PanesTemplateSelector.FileViewTemplate>
          <pane:PanesTemplateSelector.FileStatsViewTemplate>
            <DataTemplate>
              <StackPanel Orientation="Vertical" Background="{StaticResource ToolWindowBackground}">
                <TextBlock Text="{Binding FileSize}"/>
                <TextBlock Text="{Binding LastModified}"/>
                <TextBox Text="test"/>
              </StackPanel>
            </DataTemplate>
          </pane:PanesTemplateSelector.FileStatsViewTemplate>

          <pane:PanesTemplateSelector.RecentFilesViewTemplate>
            <DataTemplate>
              <view:RecentFilesView />
            </DataTemplate>
          </pane:PanesTemplateSelector.RecentFilesViewTemplate>
        </pane:PanesTemplateSelector>
      </avalonDock:DockingManager.LayoutItemTemplateSelector>

      <avalonDock:DockingManager.LayoutItemContainerStyleSelector>
        <pane:PanesStyleSelector>
          <pane:PanesStyleSelector.ToolStyle>
            <Style TargetType="{x:Type avalonDock:LayoutAnchorableItem}">
              <Setter Property="Title" Value="{Binding Model.Title}"/>
              <Setter Property="IconSource" Value="{Binding Model.IconSource}"/>
              <Setter Property="Visibility" Value="{Binding Model.IsVisible, Mode=TwoWay, Converter={StaticResource BoolToVisibilityConverter}, ConverterParameter={x:Static Visibility.Hidden}}"/>
              <Setter Property="ContentId" Value="{Binding Model.ContentId}"/>
              <Setter Property="IsSelected" Value="{Binding Model.IsSelected, Mode=TwoWay}"/>
              <Setter Property="IsActive" Value="{Binding Model.IsActive, Mode=TwoWay}"/>
            </Style>
          </pane:PanesStyleSelector.ToolStyle>
          <pane:PanesStyleSelector.FileStyle>
            <Style TargetType="{x:Type avalonDock:LayoutItem}">
              <Setter Property="Title" Value="{Binding Model.Title}"/>
              <Setter Property="ToolTip" Value="{Binding Model.FilePath}"/>
              <Setter Property="CloseCommand" Value="{Binding Model.CloseCommand}"/>
              <Setter Property="IconSource" Value="{Binding Model.IconSource}"/>
              <Setter Property="ContentId" Value="{Binding Model.ContentId}"/>
            </Style>
          </pane:PanesStyleSelector.FileStyle>
          <pane:PanesStyleSelector.RecentFilesStyle>
            <Style TargetType="{x:Type avalonDock:LayoutItem}">
              <Setter Property="Title" Value="{Binding Model.Title}"/>
              <Setter Property="ToolTip" Value="{Binding Model.FilePath}"/>
              <Setter Property="CloseCommand" Value="{Binding Model.CloseCommand}"/>
              <Setter Property="IconSource" Value="{Binding Model.IconSource}"/>
              <Setter Property="ContentId" Value="{Binding Model.ContentId}"/>
            </Style>
          </pane:PanesStyleSelector.RecentFilesStyle>
        </pane:PanesStyleSelector>
      </avalonDock:DockingManager.LayoutItemContainerStyleSelector>
      <avalonDock:DockingManager.LayoutUpdateStrategy>
        <pane:LayoutInitializer/>
      </avalonDock:DockingManager.LayoutUpdateStrategy>

      <avalonDock:LayoutRoot>
        <avalonDock:LayoutPanel>
          <avalonDock:LayoutDocumentPane/>
          <avalonDock:LayoutAnchorablePane DockWidth="350">
          </avalonDock:LayoutAnchorablePane>
        </avalonDock:LayoutPanel>
      </avalonDock:LayoutRoot>
    </avalonDock:DockingManager>

    <StatusBar Grid.Row="3" HorizontalAlignment="Stretch">
      <StatusBarItem HorizontalAlignment="Stretch">
        <TextBlock Text="Ready."
                   Grid.Column="0" Margin="0,0,3,0" HorizontalAlignment="Stretch"/>
      </StatusBarItem>

      <StatusBarItem HorizontalAlignment="Right">
        <Grid Grid.Column="1" VerticalAlignment="Bottom" HorizontalAlignment="Right">
          <Grid.ColumnDefinitions>
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="Auto" />
            <ColumnDefinition Width="Auto" />
          </Grid.ColumnDefinitions>

          <Grid Grid.Column="0" Margin="3,0">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <TextBlock Text="Line"
                       Margin="3,0" Grid.Column="0"/>
            <TextBlock Text="{Binding ActiveDocument.Line, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                       Margin="3,0" Grid.Column="1" MinWidth="60" HorizontalAlignment="Left" />
          </Grid>

          <Grid Grid.Column="1" Margin="3,0">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="Auto" />
            </Grid.ColumnDefinitions>
            <TextBlock Text="Column"
                       Margin="3,0" Grid.Column="0"/>
            <TextBlock Text="{Binding ActiveDocument.Column, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"
                       Foreground="{DynamicResource StatusBarForegroundColor}"
                       Margin="3,0" Grid.Column="1" MinWidth="60" HorizontalAlignment="Left" />
          </Grid>

          <TextBlock Text="{Binding TextOptions.IsInsertMode,Converter={StaticResource DisplayTypeModeConverter}, Mode=OneWay}"
                     DataContext="{Binding ActiveDocument}" Margin="3, 0" Grid.Column="2"/>
        </Grid>
      </StatusBarItem>
    </StatusBar>
  </Grid>
</Window>
